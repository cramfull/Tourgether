name: Prod Deploy Actions

on:
  push:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 빌드 (테스트 생략)
      - name: Build without Tests
        run: ./gradlew clean build -x test --no-daemon

      # 4. JAR 아티팩트 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JAR 아티팩트 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs

      # 3. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 4. ECR 로그인
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker buildx build --platform linux/amd64 \
          -f Dockerfile \
          -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest \
          --push .

      # 6. docker-compose.prod.yml EC2로 복사
      - name: Copy docker-compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/home/ubuntu/tourgether-server/"

      # 7. EC2에 .env 파일 생성
      - name: Create .env.prod file on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/tourgether-server
            
            cat << 'EOF' > .env.prod
            DB_HOST=${{ secrets.DB_HOST }}
            PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}
            POSTGRES_PROD_USER=${{ secrets.POSTGRES_PROD_USER }}
            POSTGRES_PROD_PASSWORD=${{ secrets.POSTGRES_PROD_PASSWORD }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            ODSAY_API_KEY=${{ secrets.ODSAY_API_KEY }}
            IAM_ACCESS_KEY_ID=${{ secrets.IAM_ACCESS_KEY_ID }}
            IAM_SECRET_ACCESS_KEY=${{ secrets.IAM_SECRET_ACCESS_KEY }}
            SPRING_JWT_ACCESS_SECRET_KEY=${{ secrets.JWT_ACCESS_SECRET_KEY }}
            SPRING_JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}
            SPRING_OAUTH2_CLIENT_PROVIDER_GOOGLE_USERINFO_URI=${{ secrets.GOOGLE_USERINFO_URI }}
            SPRING_OAUTH2_CLIENT_PROVIDER_GOOGLE_UNLINK_URI=${{ secrets.GOOGLE_UNLINK_URI }}
            SPRING_OAUTH2_CLIENT_PROVIDER_KAKAO_USERINFO_URI=${{ secrets.KAKAO_USERINFO_URI }}
            SPRING_OAUTH2_CLIENT_PROVIDER_KAKAO_UNLINK_URI=${{ secrets.KAKAO_UNLINK_URI }}
            SPRING_OAUTH2_CLIENT_PROVIDER_NAVER_USERINFO_URI=${{ secrets.NAVER_USERINFO_URI }}
            SPRING_OAUTH2_CLIENT_PROVIDER_NAVER_UNLINK_URI=${{ secrets.NAVER_UNLINK_URI }}
            SPRING_OAUTH2_CLIENT_PROVIDER_NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            SPRING_OAUTH2_CLIENT_PROVIDER_NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            EOF

      # 8. EC2에서 Docker Compose 실행
      - name: Deploy on EC2 using Docker Compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/tourgether-server
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --force-recreate